#!/bin/bash

INPUTPREFIX=$1

SVMFILE="$INPUTPREFIX.svm.txt"
RANGEFILE="$INPUTPREFIX.svm.range.txt"
SCALEFILE="$INPUTPREFIX.svm.scale.txt"

## SVM file building parameters
PRIORITYOPTION=3
MINPRIORITY=1

MINSIZE=0

MINSUPPORT=10

KERNEL="RBF"

## cross-validation
K=10
NRUNS=10

## grid scan
GRIDOUT="$INPUTPREFIX.svm.grid.txt"
NGRIDCASES=200
NGRIDCONTROLS=200
C_POWER_STEP=1
GAMMA_POWER_STEP=1

## SVM
NSVMCASES=0
NSVMCONTROLS=0
MODELFILE="$INPUTPREFIX.svm.model.txt"

########################################################
## delete output files to force rebuild
rm -f $SCALEFILE
rm -f $RANGEFILE
rm -f $GRIDOUT
########################################################

## write the SVM file
if [ ! -s $SVMFILE ]
then
    echo "Writing $SVMFILE with -s $MINSIZE -m $MINSUPPORT -pri $PRIORITYOPTION --minpriority $MINPRIORITY"
    java -server -cp "build/install/pangenomics/lib/*" org.ncgr.pangenomics.genotype.fr.FRUtils -svm \
	 -i $INPUTPREFIX -s $MINSIZE -m $MINSUPPORT -pri $PRIORITYOPTION -mpri $MINPRIORITY
fi

## scale the SVM data
if [ ! -s $SCALEFILE ]
then
    echo "Scaling $SVMFILE"
    java -server -cp "build/install/pangenomics/lib/*" org.ncgr.libsvm.Scaler -s $RANGEFILE -d $SVMFILE > $SCALEFILE
fi

## run GridSearcher on the full scaled data to find optimum SVM parameters
# usage: GridSearcher [options]
#  -Cstep <arg>       step for n in C=2^n [1]
#  -datafile <arg>    input data file in SVM format [required]
#  -gammastep <arg>   step for n in gamma=2^n [1]
#  -k <arg>           k-fold for cross validation [10]
#  -ncases <arg>      set number of cases to use in search [0=all]
#  -ncontrols <arg>   set number of controls to use in search [0=all]
#  -v                 toggle verbose output

# if [ ! -s $GRIDOUT ]
# then
#    starttime=`date`
#    ARGS="-datafile $SCALEFILE -k $K -ncases $NGRIDCASES -ncontrols $NGRIDCONTROLS -Cstep $C_POWER_STEP -gammastep $GAMMA_POWER_STEP -kernel $KERNEL"
#    echo "Running GridSearcher with $ARGS"
#    java -server -cp "build/install/pangenomics/lib/*" org.ncgr.libsvm.GridSearcher -v $ARGS > $GRIDOUT
#    endtime=`date`
#    echo "$starttime - $endtime"
# fi

## set default SVM parameters, C=1, default gamma
ARGS="-h 0 -m 10000 -C 1.0 -k $K -ncases $NSVMCASES -ncontrols $NSVMCONTROLS"

## get SVM parameters pangenomicsom grid scan
# if [ -s $GRIDOUT ]
# then
#     C=`tail -1 $GRIDOUT | awk '{ print $1; }'`
#     gamma=`tail -1 $GRIDOUT | awk '{ print $2; }'`
#     perc=`tail -1 $GRIDOUT | awk '{ print $3; }'`
#     ARGS="-C $C -gamma $gamma -k $K -ncases $NSVMCASES -ncontrols $NSVMCONTROLS"
#     echo "GRID search resulted in: $ARGS"
# fi

## run cross-validation on the determined params to collect stats
echo "Running $NRUNS CrossValidator runs on $SCALEFILE with $ARGS"
java -server -cp "build/install/pangenomics/lib/*" org.ncgr.libsvm.CrossValidator \
     $ARGS -nruns $NRUNS -i $SCALEFILE > "$INPUTPREFIX.crossvalidation.txt"

## train the SVM on the given samples
# usage: Trainer [options] input-file model-file
#  -b,--probability-estimates <arg>   0/1 toggle whether to train a SVC or
#                                     SVR model for probability estimates
#                                     [0]
#  -c,--cost <arg>                    set the cost parameter C in C-SVC,
#                                     epsilon-SVR and nu-SVR [1]
#  -d,--kernel-degree <arg>           set degree in kernel function [3]
#  -e,--epsilon <arg>                 set tolerance of termination criterion
#                                     [0.001]
#  -g,--kernel-gamma <arg>            set gamma in kernel function
#                                     [1/#features]
#  -h,--shrinking <arg>               0/1 toggle whether to use the
#                                     shrinking heuristics [1]
#  -m,--cachesize <arg>               set cache memory size in MB [100]
#  -n,--nu <arg>                      set the parameter nu of nu-SVC,
#                                     one-class SVM, and nu-SVR [0.5]
#  -p,--epsilon-loss <arg>            set the epsilon value in loss function
#                                     of epsilon-SVR [0.1]
#  -r,--kernel-coef0 <arg>            set coef0 in kernel function [0]
#  -s,--svm-type <arg>                set type of SVM [0]: 0=C-SVC;
#                                     1=nu-SVC; 2=one-class SVM;
#                                     3=epsilon-SVR; 4=nu-SVR
#  -t,--kernel-type <arg>             set type of kernel function [2]:
#                                     0=linear; 1=polynomial; 2=radial basis
#                                     function; 3=sigmoid; 4=precomputed
#                                     kernel
#  -v,--verbose                       verbose output
#  -w,--weight <arg>                  set the parameter C of class i to
#                                     weight*C, for C-SVC [1]

#ARGS="-c 7.81e-3 -g 3.81e-6 -s 0 -t 0 -m 10000"
#echo "Running Trainer on $SCALEFILE with $ARGS"
#java -server -cp "build/install/pangenomics/lib/*" org.ncgr.libsvm.Trainer \
#     $ARGS $SCALEFILE $MODELFILE

